1. Development steps.
	STEP 1: Load data
		First of all, in order to do this project, I need to load data from the .dat files to database tables. There are many ways to load data to database. A bruteforce way is simple read data from the .dat files and insert into tables. This way may take quite a long. So I choose to use some database utilities. I found 2 ways to load data: sqlldr and external table. However I failed to find a way load data using external table with relative path. So I chose sqlldr. Initially, sqlldr was slow as slow as well. I searched the Internet and add configure argument to the command like 'parallel=true'. Finally, the data can be loaded into tables within several seconds.
	STEP 2: split Function
		Here I first implement some utility functions of this project. One core function is split function which can tokenize the query to tokens. A very simple way to do this is to use regular expressions. With regular expressions, this function can be implemented with just a few lines of code. In this stage, I create some nested table type to store the collection of token(actually char). Then I tested the function to ensure its correctness. 
	STEP 3: getQuality Function
		It is easy to notice that for all these tasks, adrank is a simple function of quality. Therefore, I implemented the getQuality function which can be used by all the tasks. As mentioned above, I created nested table type to store collection of tokens. Here I collect all the keywords and store into a nested table for each advertisers. So my function takes 2 collections of tokens and ctc value as input. Then function first unions the 2 collections of token and loop the result of the union. Then for each iteration, loop the 2 collections to count the number of token of the current iteration of the union result. Then we get 2 vectors(actually another nested table type I created) of integers. Then for the 2 vectors, loop them to calculate the cosine value described in the specification. The return value is the product of the cosine value and the ctc.
	STEP 4: main loop
		The main loop is the main logic of the adwords prcess. For all the 6 tasks, the main loop is quite similar. For the first price auction, for each query, calculate the adrank for all the advertisers and rank them by adrank. Then take the top K advertisers. The top K advertisers will be shown and may be charged. Then for each advertiser, compare the impressions (how many time it has been shown) with ctc*100 to determine whether to charge or not. For second price auction, the only difference is simply change the value of the next highest bid rather than its own bid.
2. Difficulties and Solutions.
	There are two main difficulties in this project:
		1. I am not quite familiar with pl sql. In the class, we mainly focuses on the queries. So I am not quite familiar with things like cursor, nested table, loop, if, case..., which plays an important role in this project. To overcome this problem, I searched a lot on the Internet.
		2. The second problem is that this project is relatively complex and sometimes I am not quite clear about some details. So I asked a lot of problems on PIAZZA.
	Another problem is that as everybody tests their code on the server, the server is overloaded and it takes a long time to test. So I have to try to improve the performance of my code.
3. What I have learnt in this project.
	In this project, I learnt briefly how adwords system works. During the implementation, I got more familiar with the pl sql and learnt some knowledge of how to utilize the code.